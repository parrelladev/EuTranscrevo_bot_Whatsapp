/**
 * üìù M√ìDULO DE TRANSCRI√á√ÉO DE √ÅUDIO
 * 
 * Este m√≥dulo processa mensagens de √°udio do WhatsApp:
 * 1. Baixa o √°udio da mensagem
 * 2. Salva temporariamente no sistema
 * 3. Otimiza o √°udio com ffmpeg
 * 4. Envia para transcri√ß√£o via API Replicate
 * 5. Retorna a transcri√ß√£o como resposta
 * 6. Limpa arquivos tempor√°rios
 * 
 * @author parrelladev
 * @version 1.0.0
 */

const fs = require('fs');
const path = require('path');
const os = require('os');
const config = require('../config');

// Importa os servi√ßos necess√°rios
const { optimizeAudio } = require('../services/audioOptimizer');
const { transcribeAudio } = require('../services/replicateClient');
const { fileTypeFromFile } = require('file-type'); // Para verificar se √© realmente um arquivo de √°udio

/**
 * Fun√ß√£o principal de transcri√ß√£o
 * 
 * Processa uma mensagem de √°udio do WhatsApp e retorna sua transcri√ß√£o
 * 
 * @param {Object} message - Objeto da mensagem do WhatsApp
 * @param {Object} client - Cliente WhatsApp para enviar respostas
 * @returns {Promise<void>}
 */
module.exports = async function transcrever(message, client) {
  try {
    // Verifica se a mensagem cont√©m m√≠dia
    if (!message.hasMedia) return;

    // üéß Reage com um emoji
    await message.react('‚è≥');

    // Baixa a m√≠dia da mensagem
    const media = await message.downloadMedia();
    if (!media || !media.data) {
      console.error('‚ö†Ô∏è Erro: M√≠dia inv√°lida ou sem dados.');
      return message.reply(config.messages.audioError);
    }

    // Cria diret√≥rio tempor√°rio para processar o √°udio
    const tempDir = path.join(os.tmpdir(), config.audio.tempPrefix);
    fs.mkdirSync(tempDir, { recursive: true });

    // Gera nomes √∫nicos para os arquivos de √°udio
    const baseName = `${Date.now()}`;
    const originalPath = path.join(tempDir, `${baseName}_original.${config.audio.optimization.format}`);
    const optimizedPath = path.join(tempDir, `${baseName}_optimized.${config.audio.optimization.format}`);

    // Salva o √°udio original no disco
    fs.writeFileSync(originalPath, Buffer.from(media.data, 'base64'));
    console.log('üì• √Åudio salvo:', originalPath);

    // Verifica se o arquivo √© realmente um √°udio v√°lido
    // Isso previne processamento de arquivos maliciosos
    const fileType = await fileTypeFromFile(originalPath);

    // Logs de debug para entender o tipo de arquivo
    console.log('üîç Tipo de arquivo detectado:', fileType);
    console.log('üìã Tipos permitidos:', config.security.allowedAudioTypes);

    // Pular valida√ß√£o se configurado para debug
    if (config.development.skipFileTypeValidation) {
      console.log('‚ö†Ô∏è Valida√ß√£o de tipo de arquivo desabilitada (modo debug)');
    } else {
      if (!fileType) {
        console.log('‚ùå Nenhum tipo de arquivo detectado');
        fs.unlinkSync(originalPath);
        return message.reply(config.messages.invalidFile);
      }

      if (!config.security.allowedAudioTypes.includes(fileType.mime)) {
        console.log(`‚ùå Tipo de arquivo n√£o permitido: ${fileType.mime}`);
        fs.unlinkSync(originalPath);
        return message.reply(config.messages.invalidFile);
      }

      console.log(`‚úÖ Tipo de arquivo v√°lido: ${fileType.mime}`);
    }

    // Verifica o tamanho do arquivo
    const fileSize = fs.statSync(originalPath).size;
    console.log(`üìè Tamanho do arquivo: ${(fileSize / 1024 / 1024).toFixed(2)}MB`);

    if (fileSize > config.security.maxFileSize) {
      fs.unlinkSync(originalPath);
      return message.reply('‚ö†Ô∏è Arquivo muito grande. Tamanho m√°ximo: 50MB');
    }

    // Otimiza o √°udio para reduzir tamanho e melhorar performance
    console.log('üéõÔ∏è Otimizando √°udio...');
    await optimizeAudio(originalPath, optimizedPath);

    // Envia o √°udio otimizado para transcri√ß√£o
    const transcript = await transcribeAudio(optimizedPath);

    // Reage com "pronto" (‚úÖ)
    await message.react('‚úÖ');

    // Envia a transcri√ß√£o como resposta
    await message.reply(`${transcript.trim()}`);
    console.log(`‚úÖ Transcri√ß√£o enviada:\n${transcript}`);

    // Limpa os arquivos tempor√°rios para economizar espa√ßo
    fs.unlinkSync(originalPath);
    fs.unlinkSync(optimizedPath);

  } catch (err) {
    console.error('‚ùå Erro ao processar √°udio:', err);
    await message.react('‚ùå');
    await message.reply('‚ùå Ocorreu um erro ao transcrever seu √°udio.');
  }
};
