/**
 * üìÅ UTILIT√ÅRIOS PARA OPERA√á√ïES COM ARQUIVOS
 * 
 * Este m√≥dulo cont√©m fun√ß√µes auxiliares para:
 * - Valida√ß√£o de tipos de arquivo
 * - Limpeza de arquivos tempor√°rios
 * - Gera√ß√£o de nomes √∫nicos
 * - Verifica√ß√£o de permiss√µes
 * 
 * @author parrelladev
 * @version 1.0.0
 */

const fs = require('fs');
const path = require('path');
const os = require('os');
const config = require('../config');

/**
 * Gera um nome √∫nico para arquivo tempor√°rio
 * 
 * @param {string} prefix - Prefixo do nome do arquivo (opcional, usa config se n√£o informado)
 * @param {string} extension - Extens√£o do arquivo (ex: .mp3, .txt)
 * @returns {string} - Nome √∫nico do arquivo
 * 
 * @example
 * const fileName = generateUniqueFileName(); // Usa configura√ß√µes padr√£o
 * const fileName = generateUniqueFileName('audio', '.mp3');
 * // Retorna: "audio_1703123456789.mp3"
 */
function generateUniqueFileName(prefix = null, extension = '') {
  const defaultPrefix = prefix || config.audio.tempPrefix;
  const timestamp = Date.now();
  return `${defaultPrefix}_${timestamp}${extension}`;
}

/**
 * Limpa arquivos tempor√°rios de um diret√≥rio
 * 
 * @param {string} directory - Caminho do diret√≥rio (opcional, usa config se n√£o informado)
 * @param {string} pattern - Padr√£o de arquivos para deletar (ex: *.mp3)
 * @returns {Promise<number>} - N√∫mero de arquivos deletados
 * 
 * @example
 * const deletedCount = await cleanTempFiles(); // Usa configura√ß√µes padr√£o
 * const deletedCount = await cleanTempFiles('./temp', '*.mp3');
 */
async function cleanTempFiles(directory = null, pattern = '*') {
  // Usa diret√≥rio padr√£o do config se n√£o informado
  const targetDir = directory || path.join(os.tmpdir(), config.audio.tempPrefix);
  try {
    if (!fs.existsSync(targetDir)) {
      return 0;
    }

    const files = fs.readdirSync(targetDir);
    let deletedCount = 0;

    for (const file of files) {
      const filePath = path.join(targetDir, file);
      const stats = fs.statSync(filePath);

      if (stats.isFile()) {
        // Verifica se o arquivo corresponde ao padr√£o
        if (pattern === '*' || file.endsWith(pattern.replace('*', ''))) {
          fs.unlinkSync(filePath);
          deletedCount++;
          console.log(`üóëÔ∏è Arquivo deletado: ${filePath}`);
        }
      }
    }

    return deletedCount;
  } catch (error) {
    console.error('‚ùå Erro ao limpar arquivos tempor√°rios:', error);
    return 0;
  }
}

/**
 * Verifica se um arquivo existe e √© acess√≠vel
 * 
 * @param {string} filePath - Caminho do arquivo
 * @returns {boolean} - True se o arquivo existe e √© acess√≠vel
 */
function fileExists(filePath) {
  try {
    return fs.existsSync(filePath) && fs.accessSync(filePath, fs.constants.R_OK) === undefined;
  } catch (error) {
    return false;
  }
}

/**
 * Obt√©m o tamanho de um arquivo em bytes
 * 
 * @param {string} filePath - Caminho do arquivo
 * @returns {number} - Tamanho do arquivo em bytes
 * @throws {Error} - Se o arquivo n√£o existir
 */
function getFileSize(filePath) {
  if (!fileExists(filePath)) {
    throw new Error(`Arquivo n√£o encontrado: ${filePath}`);
  }
  
  const stats = fs.statSync(filePath);
  return stats.size;
}

/**
 * Cria um diret√≥rio se n√£o existir
 * 
 * @param {string} dirPath - Caminho do diret√≥rio
 * @returns {boolean} - True se o diret√≥rio foi criado ou j√° existia
 */
function ensureDirectoryExists(dirPath) {
  try {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(`üìÅ Diret√≥rio criado: ${dirPath}`);
    }
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao criar diret√≥rio:', error);
    return false;
  }
}

module.exports = {
  generateUniqueFileName,
  cleanTempFiles,
  fileExists,
  getFileSize,
  ensureDirectoryExists
};
